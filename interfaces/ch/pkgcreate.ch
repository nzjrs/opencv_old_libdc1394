#!/bin/ch
/* for creating Ch OpenCV 2.1, April 18, 2005 

    this script does the following:
    + Copies headers from <OPENCV_HOME>/cv/include and <OPENCV_HOME>/otherlibs/highgui
      to ./include subfolder
    + Copies OpenCV DLLs to bin subfolders
    + Copies C samples from <OPENCV_HOME>/samples/c to ./chopencv/demos
      Copies Ch samples from ./demos/ directory to ./chopencv/demos^M
    + Generates *.h files in ./chfcreate/ directory, those files containing bare function lists
    + Processes each function list with c2chf
    + Moves *.chf files generated by c2chf to ./chopencv/lib subfolder and
      *_chdl.c files to ./c/<libname> subfolder
    + Removes automatically generated wrappers that have manually
      created counterparts in *_chdl.c.
    + Builds .dl files using Ch SDK and places them to ./chopencv/dl
*/

#include <unistd.h>   // for access()
#include <dlfcn.h>    // for dlopen()
#include <chshell.h>  // for chinfo()
int removeFuncProto(char *filename, char *funcname, int keepNum);

string_t pkgname="chopencv";    // define package name
chinfo_t info;                  // for Ch version number
string_t cwd = _cwd;            // the current working directory
string_t debugFile;             // compilation debug information in Windows
string_t debug;               
string_t makecmd;
#if defined(_WIN32_)
    debug=">nul 2>nul";         // surpress messages during cleaning  in Windows
    debugFile =">logfile 2>&1"; // compilation debug information in 'logfile'
    makecmd = "nmake -f Makefile.win";
#else
    makecmd = "make -f Makefile";
#endif

//make sure pgkcreate.ch is run from the current working directory
if(access("pkgcreate.ch", R_OK)) {
    echo Run ./pkgcreate.ch in the current directory.
    exit(-1);
}
// run this script in proper Ch version
chinfo(&info);
if ((info.vermajor*100+ info.verminor*10 +  info.vermicro) < 501) {
   echo "To run this script, you need to install Ch version 5.0.1.12201 or higher"
   echo "You can download the latest version from http://www.softintegration.com/download"
   exit(-1);
}

echo clean up existing directory and create new ones
if (!access(pkgname, F_OK))
  rm -rf $pkgname
mkdir $pkgname
mkdir $pkgname/dl $pkgname/lib $pkgname/include $pkgname/demos $pkgname/bin

echo copying header files ...
cp -f ../cv/include/*.h $pkgname/include
cp -f ../cxcore/include/*.h $pkgname/include
cp -f ../cvaux/include/*.h $pkgname/include
cp -f ../otherlibs/highgui/highgui.h $pkgname/include
#if defined(_WIN32_)
cp -f ../otherlibs/cvcam/include/*.h $pkgname/include
#endif

echo copying demo programs ...
cp -fr demos/*           $pkgname/demos
cp -f ../samples/c/*.c   $pkgname/demos
cp -f ../samples/c/*.jpg $pkgname/demos
cp -f ../samples/c/*.png $pkgname/demos
cp -f ../data/haarcascades/haarcascade_frontalface_alt.xml $pkgname/demos/data/haarcascades/haarcascade_frontalface_alt.xml
chmod 755 $pkgname/demos/*.c

#if defined(_WIN32_)
  echo copying OpenCV DLLs ...
  cp -f ../bin/*.dll $pkgname/bin
#endif

/* details about processhfile() are available in Ch SDK Users' Guide */
echo extracting function prototypes ...
processhfile("CVAPI", 1, ";",  "chopencv/include/cv.h", 
             "chfcreate/cv_.h", "CV_DEFAULT");
processhfile("CVAPI", 1, ";",  "chopencv/include/cvaux.h", 
             "chfcreate/cvaux_.h", "CV_DEFAULT");
processhfile("CVAPI", 1, ";", "chopencv/include/cxcore.h", 
             "chfcreate/cxcore_.h", "CV_DEFAULT");
processhfile("CVAPI", 1, ";", "chopencv/include/highgui.h", 
             "chfcreate/highgui_.h", "CV_DEFAULT");
#if defined(_WIN32_)
processhfile("CVCAM_API", 0, ";", "chopencv/include/cvcam.h", 
             "chfcreate/cvcam.h", "CV_DEFAULT");
#endif

echo change 'CVAPI(data_type) func(arg_list);' to 'data_type func(arg_list);'
sed "s/CVAPI(\([^)]*\))/\1/" chfcreate/cv_.h > chfcreate/cv.h
sed "s/CVAPI(\([^)]*\))/\1/" chfcreate/cvaux_.h > chfcreate/cvaux.h
sed "s/CVAPI(\([^)]*\))/\1/" chfcreate/cxcore_.h > chfcreate/cxcore.h
sed "s/CVAPI(\([^)]*\))/\1/" chfcreate/highgui_.h > chfcreate/highgui.h
//sed "s/CVCAM_API(\([^)]*\))/\1/" chfcreate/cvcam_.h > chfcreate/cvcam.h

echo removing special functions
/* those functions are hand-made specially and are located in chfhandmade/ already*/ 
removeFuncProto("chfcreate/cv.h", "cvBoundingRect", 0);
removeFuncProto("chfcreate/cv.h", "cvFitEllipse2", 0);
removeFuncProto("chfcreate/cv.h", "cvMinAreaRect2", 0);
removeFuncProto("chfcreate/cxcore.h", "cvCalcCovarMatrix", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGetModuleInfo", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGetErrInfo", 0);
removeFuncProto("chfcreate/cxcore.h", "cvLoad", 0);
removeFuncProto("chfcreate/cxcore.h", "cvSetMemoryManager", 0);
removeFuncProto("chfcreate/cxcore.h", "cvSetIPLAllocators", 0);
removeFuncProto("chfcreate/cxcore.h", "cvColorToScalar", 0);
removeFuncProto("chfcreate/cxcore.h", "cvAvg", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGet1D", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGet2D", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGet3D", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGetImageROI", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGetND", 0);
removeFuncProto("chfcreate/cxcore.h", "cvGetSize", 0);
removeFuncProto("chfcreate/cxcore.h", "cvSum", 0);
removeFuncProto("chfcreate/cxcore.h", "cvTrace", 0);
removeFuncProto("chfcreate/highgui.h", "cvCreateTrackbar", 0);
removeFuncProto("chfcreate/highgui.h", "cvSetMouseCallback", 0);
removeFuncProto("chfcreate/highgui.h", "cvSetPostprocessFuncWin32", 0);
removeFuncProto("chfcreate/highgui.h", "cvSetPreprocessFuncWin32", 0);
#if defined(_WIN32_)
removeFuncProto("chfcreate/cvcam.h", "cvcamAVISetCallback", 0);
removeFuncProto("chfcreate/cvcam.h", "cvcamSetProperty", 0);
removeFuncProto("chfcreate/cvcam.h", "cvcamPlayAVI", 0);
#endif

echo removing undefined functions in cvaux.h
char *func_list[] ={"icvCreate1DHMM", "icvRelease1DHMM","icvUniform1DSegm",
     "icvInit1DMixSegm", "icvEstimate1DHMMStateParams", "icvEstimate1DObsProb",
     "icvEstimate1DTransProb", "icvViterbi", "icv1DMixSegmL2", "cvDecompPoly",
     "icvDrawFilledSegments","cvExtractSingleEdges", "cvStartFindCliques", 
     "cvFindNextMaximalClique","cvEndFindCliques","cvBronKerbosch",
     "cvSubgraphWeight", "cvFindCliqueEx", "icvComputeFundMatrEpipoles",
     "icvSolveCubic", "icvGetCommonArea","icvSelectBestRt",
     "cvInitStereoRectification", NULL};
int i = 0;
while(func_list[i]!= NULL)
{
    removeFuncProto("chfcreate/cvaux.h", func_list[i], 0);
    i++;
}

echo generating cv_chdl.c, cvaux_chdl.c, cxcore_chdl.c in c/
echo generating highgui_chdl.c in c/
echo generating *.chf in $pkgname/lib ...
c2chf chfcreate/cv.h -o c c -o chf $pkgname/lib
c2chf chfcreate/cvaux.h -h _Chcv_handle -o c c -o chf $pkgname/lib
c2chf chfcreate/cxcore.h -h _Chcv_handle -o c c -o chf $pkgname/lib
c2chf chfcreate/highgui.h -o c c -o chf $pkgname/lib
#if defined(_WIN32_)
echo generating cvcam_chdl.c in c/
c2chf chfcreate/cvcam.h -o c c -o chf $pkgname/lib
#endif

echo patching special .chf files ...
cp -f chfhandmade/*.chf $pkgname/lib
chmod 644 $pkgname/lib/*.chf

echo making .dl files ...
cd c
$makecmd clean $debug
$makecmd $debugFile

// go back to original directory
cd $cwd
echo adding .DLL path and testing .dl file ...
#pragma exec _path=stradd(_path, "chopencv/bin");
if (dlopen("c/libcv.dl", RTLD_LAZY) == NULL) {
    printf("Error: test of loading libcv.dl: %s\n", dlerror());
    exit(-1);
}
if (dlopen("c/libhighgui.dl", RTLD_LAZY) == NULL) {
    printf("Error: test of loading libhighgui.dl: %s\n", dlerror());
    exit(-1);
}
#if defined(_WIN32_)
if (dlopen("c/libcvcam.dl", RTLD_LAZY) == NULL) {
    printf("Error: test of loading libcvcam.dl: %s\n", dlerror());
    exit(-1);
}
#endif

mv -f c/libcv.dl $pkgname/dl
mv -f c/libhighgui.dl $pkgname/dl
#if defined(_WIN32_)
mv -f c/libcvcam.dl $pkgname/dl
#endif

echo package $pkgname created successfully!

/*************************************************************************
 * (C) Copyright 2005 SoftIntegration, Inc.
 * This function is in public domain, use as it is without any warranty.
 ************************************************************************** 
 * This function removes function prototypes such as
 *     int func1(int i);
 * from a header file that has already been filtered through processhfile().
 *
 * Argumnets:
 *    filename: name of the file to process
 *    funcname: function name to look for
 *    keepNum: if 0, remove all occurances of this prototype.
 *             if >0 , keep the keepNum desired funcname that is found.
 * Example:
 *    removeFuncProto("chfcreate/test.h", "func1", 2);
 * This will remove all instances except for the 2nd instance of the function, 
 * func1(), prototype that is found in the file chfcreate/test.h.
 ***************************************************************/
#define LINESIZE 1024
int removeFuncProto(char *filename, char *funcname, int keepNum)
{
   char line[LINESIZE], *ptr;
   string_t filenameout;
   FILE *stream1, *stream2;
   int num = 0;

   /* Check to see if the funcname provided is NULL */
   if (funcname == NULL)
   {
      printf("Error: %s: Null funcname recieved.\n", __func__);
      return -1;
   }

   /* Check for access to the file */
   if(!(stream1 = fopen(filename, "r")))
   {
      printf("Error: %s: Unable to open '%s' for reading.\n", __func__, filename);
      return -1;
   }

   filenameout = tmpnam(NULL);
   /* Check for access to the file */
   if(!(stream2 = fopen(filenameout, "w")))
   {
      printf("Error: %s: Unable to open '%s' for writing.\n", __func__, filenameout);
      return -1;
   }

    fgets(line, LINESIZE , stream1);
    while(!feof(stream1)) {
        if(ptr = strstr(line, funcname)) {
           if(*(ptr-1) == ' ' || *(ptr-1) == '\t')     /* find ' ' in "int' 'funcname();" */
           {
              ptr += strlen(funcname);
              while(*ptr == ' ')         /* skip ' ' in "int funcname' '();" */
              {
                 ptr++;
              }
              if(*ptr == '(') {          /* Find '(' in "int funcname();" */
                 num++;
                 if(num != keepNum) {
                   while(!strchr(line, ';'))      /* till find ';' in "int funcname();" */
                   {
                     fgets(line, LINESIZE , stream1);
                   }
                   fgets(line, LINESIZE , stream1);
                   continue;
                 }
              }
           }
        }
        fputs(line, stream2);
        fgets(line, LINESIZE , stream1);
    }
    fclose(stream1);
    fclose(stream2);
   /* Move the temperary file to the original file. */
    mv -f $filenameout $filename
    return 0;
}
